datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// TODO (harshith): Need to fix enum array in swagger
generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/@@generated"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model User {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  fullname                String?
  username                String
  role                    Role
  initialSetupComplete    Boolean @default(false)
  anonymousDataCollection Boolean @default(false)

  UsersOnWorkspaces UsersOnWorkspaces[]
  template          Template[]
  team              Team[]
}

model Workspace {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name String
  slug String  @unique
  icon String?

  UsersOnWorkspaces UsersOnWorkspaces[]
  Team              Team[]
  Label             Label[]
  Template          Template[]
  SyncAction        SyncAction[]
}

model UsersOnWorkspaces {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  workspaceId String
  status      Status    @default(ACTIVE)

  @@id([userId, workspaceId])
}

model Team {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name       String
  identifier String
  icon       String?

  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  Label          Label[]
  Template       Template[]
  Workflow       Workflow[]
  TeamPreference TeamPreference[]
}

model Label {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String
  color       String
  description String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  group       Label?    @relation("Report", fields: [groupId], references: [id])
  groupId     String?
  labels      Label[]   @relation("Report")
}

model Template {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String
  type         String
  templateData Json

  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
}

model Workflow {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name     String
  position Int
  color    String
  type     String

  team   Team?  @relation(fields: [teamId], references: [id])
  teamId String
}

model TeamPreference {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  team   Team?  @relation(fields: [teamId], references: [id])
  teamId String

  preference Preference
  value      String
}

model SyncAction {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName  String
  modelId    String
  action     ActionType
  sequenceId Int

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([modelId, action])
}

enum Preference {
  ISSUE_ESTIMATES
  PRIORITIES
}

enum IssueEstimateValues {
  EXPONENTIAL
  FIBONACCI
  LINEAR
  T_SHIRT
}

enum Priorities {
  NO_PRIORITY_FIRST
  NO_PRIORITY_LAST
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  SUSPENDED
}

enum ActionType {
  I
  U
  D
}
